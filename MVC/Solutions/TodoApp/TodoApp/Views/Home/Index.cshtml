@{
    ViewBag.Title = "todos";
}

<section id="tasks-section">
    <header>
        <h1>todos</h1>
        <input autofocus id="new-task" placeholder="What needs to be done?" onkeydown="addTask()"/>
    </header>
    <div id="tasks-div">
        <ul id="tasks-list">
            
        </ul>
    </div>
</section>

@section scripts{
    <script>
        window.onload = _ => {
            /* constant urls to server */
            const baseurl = '@ViewBag.BaseUrl';
            const getTasksPath = 'Home/GetTasks/';
            const completeTaskPath = 'home/api/tasks/toggle/';
            const addTaskPath = 'home/api/tasks/create/';
            const deleteTaskPath = 'home/api/tasks/delete/';

            /* Front-end Model (App state) */
            let userEmail = '@ViewBag.UserEmail';
            let tasks = [];

            /* HTMLElements (App View) */
            let addTaskInputElement = document.querySelector('#new-task');
            let tasksListElement = document.querySelector('#tasks-list');

            getTaskItemHTML = (id, title, isCompleted) => {
                return `<li>
                            <div id="task-${id}" class="task-item ${isCompleted ? 'completed' : ''}">
                                <input type="checkbox" name="${id}" ${isCompleted ? 'checked' : ''} onchange="taskChangedEvent(${id})"></input>
                                <label>${title}</label>
                                <button class="task-delete" onclick="deleteTask(${id})"></button>
                            </div>
                        </li>`;
            }

            renderTasksListUI = _ => {
                tasksListElement.innerHTML = '';
                tasks.forEach(x => tasksListElement.innerHTML += getTaskItemHTML(x.Id, x.Title, x.IsCompleted));
            }

            taskChangedEvent = id => {
                /* update Frontend Model (App State) */
                let index = tasks.findIndex(x => x.Id == id);
                tasks[index].IsCompleted = !tasks[index].IsCompleted;
                /* update App View */
                tasksListElement.querySelector('#task-' + id).classList.toggle("completed");
                /* update Backend Model (Database) */
                let req = new Request(baseurl + completeTaskPath + id, {
                    method: 'POST'
                });
                fetch(req);
            }

            deleteTask = id => {
                /* update Frontend Model (App State) */
                let index = tasks.findIndex(x => x.Id == id);
                tasks.splice(index, 1);
                /* update App View */
                let taskListItemElement = tasksListElement.querySelector('#task-' + id).parentNode;
                tasksListElement.removeChild(taskListItemElement);
                /* update Backend Model (Database) */
                let req = new Request(baseurl + deleteTaskPath + id, {
                    method: 'POST'
                });
                fetch(req);
            }

            addTask = _ => {
                /* Check if ENTER was pressed and text has length > 0 */
                if (event.keyCode === 13 && addTaskInputElement.value.length > 0) {
                    /* Create the task, */
                    let task = {
                        Title: addTaskInputElement.value,
                        IsCompleted: false
                    };
                    /* update Backend Model (Database), */
                    let req = new Request(baseurl + addTaskPath + '?Title=' + task.Title + '&UserEmail=' + userEmail + '&IsCompleted=' + task.IsCompleted, {
                        method: 'POST'
                    });  
                    fetch(req)
                        .then(response => response.json())
                        .then(json => task.Id = json)
                        /* update Fronden Model (App State) */
                        .then(_ => tasks.push(task))
                        /* update UI (App View) */
                        .then(_ => tasksListElement.innerHTML += getTaskItemHTML(task.Id, task.Title, task.IsCompleted))
                        .then(_ => addTaskInputElement.value = '');
                }
            }
            
            initializeTasks = _ => {
                let req = new Request(baseurl + getTasksPath + userEmail + '/', {
                    method: 'GET'
                });
                
                fetch(req)
                    .then(response => response.json())
                    .then(json => tasks = json)
                    .then(_ => renderTasksListUI());
            }

            initializeTasks();
        }
    </script>
}